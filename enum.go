package main

import (
	"os"
	"strings"
	"text/tabwriter"
	"text/template"
	"unicode"
)

func Run(fileName string, packageName string, typeName string, noPrefix bool, names []string) error {
	data := make(map[string]interface{})
	data["Package"] = packageName
	data["Names"] = names
	data["Type"] = typeName
	data["Prefix"] = ""
	if !noPrefix {
		data["Prefix"] = typeName
	}
	f, err := os.Create(fileName)
	if err != nil {
		return err
	}
	defer f.Close()

	funcMap := template.FuncMap{
		"ToLower":    strings.ToLower,
		"Capitalize": Capitalize,
	}
	// tabw := tabwriter.NewWriter(f, 8, 8, 8, ' ', 0)
	tabw := tabwriter.NewWriter(f, 1, 1, 1, ' ', 0)
	t2 := template.New("t_enum").Funcs(funcMap)
	t2, err = t2.Parse(fileTemplate)
	if err != nil {
		return err
	}
	return t2.Execute(tabw, data)
}

/*
	func Title(s string) string {
		return cases.Title(language.English).String(s)
	}
*/
func Capitalize(str string) string {
	runes := []rune(str)
	runes[0] = unicode.ToUpper(runes[0])
	return string(runes)
}

const fileTemplate = `// Code generated by enum (github.com/mpkondrashin/enum). DO NOT EDIT

package {{.Package}}

import (
    "encoding/json"
    "errors"
    "fmt"
    "strconv"
    "strings"
)

type {{.Type}} int

const (
{{range .Names}}    {{$.Prefix}}{{Capitalize .}}	{{$.Type }}	= iota
{{end -}})

// String - return string representation for {{.Type}} value
func (v {{.Type}})String() string {
    s, ok := map[{{.Type}}]string {
{{range .Names}}        {{$.Prefix}}{{Capitalize .}}:	"{{.}}",
{{end}}    }[v]
    if ok {
        return s
    }
    return "{{.Type}}(" + strconv.FormatInt(int64(v), 10) + ")"
}

// ErrUnknown{{.Type}} - will be returned wrapped when parsing string
// containing unrecognized value.
var ErrUnknown{{.Type}} = errors.New("unknown {{.Type}}")

var map{{.Type}}FromString = map[string]{{.Type}}{
{{range .Names}}    "{{ToLower .}}":	{{$.Prefix}}{{Capitalize .}},
{{end}}}

// UnmarshalJSON implements the Unmarshaler interface of the json package for {{.Type}}.
func (s *{{.Type}}) UnmarshalJSON(data []byte) error {
    var v string
    if err := json.Unmarshal(data, &v); err != nil {
        return err
    }
    result, ok := map{{.Type}}FromString[strings.ToLower(v)]
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknown{{.Type}}, v)
    }
    *s = result
    return nil
}

// MarshalJSON implements the Marshaler interface of the json package for {{.Type}}.
func (s {{.Type}}) MarshalJSON() ([]byte, error) {
    return []byte(fmt.Sprintf("\"%v\"", s)), nil
}

// UnmarshalYAML implements the Unmarshaler interface of the yaml.v3 package for {{.Type}}.
func (s *{{.Type}}) UnmarshalYAML(unmarshal func(interface{}) error) error {
    var v string
    if err := unmarshal(&v); err != nil {
        return err
    }
    result, ok := map{{.Type}}FromString[strings.ToLower(v)]		
    if !ok {
        return fmt.Errorf("%w: %s", ErrUnknown{{.Type}}, v)
    }
    *s = result
    return nil
}
`
